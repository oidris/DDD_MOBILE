package org.fhi360.ddd.Db;import androidx.annotation.NonNull;import androidx.room.Database;import androidx.room.Room;import androidx.room.RoomDatabase;import androidx.room.TypeConverters;import androidx.room.migration.Migration;import androidx.sqlite.db.SupportSQLiteDatabase;import android.content.Context;import android.util.Log;import org.fhi360.ddd.ARVRefill;import org.fhi360.ddd.domain.ARV;import org.fhi360.ddd.domain.Account;import org.fhi360.ddd.domain.Appointment;import org.fhi360.ddd.domain.Converters;import org.fhi360.ddd.domain.Devolve;import org.fhi360.ddd.domain.Drug;import org.fhi360.ddd.domain.Encounter;import org.fhi360.ddd.domain.Facility;import org.fhi360.ddd.domain.IssuedDrug;import org.fhi360.ddd.domain.Patient;import org.fhi360.ddd.domain.PreLoadRegimen;import org.fhi360.ddd.domain.Regimen;import org.fhi360.ddd.domain.RegimenHistory;import org.fhi360.ddd.domain.User;import org.fhi360.ddd.repositories.ARVRepository;import org.fhi360.ddd.repositories.AppointmentRepository;import org.fhi360.ddd.repositories.DevolveRepository;import org.fhi360.ddd.repositories.DrugIssuedRepository;import org.fhi360.ddd.repositories.DrugRepository;import org.fhi360.ddd.repositories.EncounterRepository;import org.fhi360.ddd.repositories.FacilityRepository;import org.fhi360.ddd.repositories.PatientRepository;import org.fhi360.ddd.repositories.PharmacistAccountRepository;import org.fhi360.ddd.repositories.PreLoadRegimenRepository;import org.fhi360.ddd.repositories.RegimenHistoryRepository;import org.fhi360.ddd.repositories.RegimenRepository;import org.fhi360.ddd.repositories.UserRepository;import java.util.concurrent.Executors;@Database(entities = {Account.class, Encounter.class, User.class, Devolve.class        , Regimen.class, Drug.class, RegimenHistory.class, IssuedDrug.class, Patient.class, ARV.class, Appointment.class, PreLoadRegimen.class, Facility.class}, version = 2, exportSchema = false)@TypeConverters({Converters.class})public abstract class DDDDb extends RoomDatabase {    public abstract PatientRepository patientRepository();    public abstract FacilityRepository facilityRepository();    public abstract UserRepository userRepository();    public abstract ARVRepository arvRefillRepository();    public abstract RegimenHistoryRepository regimenHistoryRepository();    public abstract PharmacistAccountRepository pharmacistAccountRepository();    public abstract RegimenRepository regimenRepository();    public abstract DevolveRepository devolveRepository();    public abstract EncounterRepository encounterRepository();    public abstract DrugRepository drugRepository();    public abstract PreLoadRegimenRepository preLoadRegimenRepository();    public abstract AppointmentRepository appointmentRepository();    public abstract DrugIssuedRepository drugIssuedRepository();    public static DDDDb dddDb;    public static DDDDb getInstance(Context context) {        if (null == dddDb) {            dddDb = buildDatabaseInstance(context);        }        return dddDb;    }    private static DDDDb buildDatabaseInstance(final Context context) {        return Room.databaseBuilder(context, DDDDb.class, "DDD")                .addMigrations()                .allowMainThreadQueries()                .addCallback(new Callback() {                    @Override                    public void onCreate(@NonNull SupportSQLiteDatabase db) {                        super.onCreate(db);                        Executors.newSingleThreadExecutor().execute(new Runnable() {                            @Override                            public void run() {                                getInstance(context).patientRepository().insertAll(Patient.patientsPopulate());                                getInstance(context).preLoadRegimenRepository().insertAll(PreLoadRegimen.populateRegimen());                            }                        });                    }                })                .build();    }}